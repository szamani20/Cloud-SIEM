import threading

from config.postgresql.parameters import PostgreSQLParams
from config.rabbitmq.parameters import RabbitMQParams

from messaging.rabbitmq.consumer import RabbitMQConsumer

from storage.postgres.db_operations import PostgresDBOperations

from utils.helpers import extract_organization_from_message


def main():
    # logs_rabbitmq_consumer consumes logs generated by logs_fanout_exchange
    logs_rabbitmq_consumer = RabbitMQConsumer(rabbitmq_params=RabbitMQParams.LOGS_RABBITMQ)

    # postgres_log_retention_client is used to store a copy of AWS logs to DB
    postgres_log_retention_client = PostgresDBOperations(postgres_params=PostgreSQLParams.LOGS_POSTGRES_PARAMS)

    def handle_postgres_write(message, organization):
        # Write the log to postgres for retention
        postgres_log_retention_client.write_logs(logs=message, organization_name=organization)

    def callback(ch, method, properties, body):
        # When a new log is consumed from logs_fanout_exchange, extract the organization_name and the rest of the AWS log
        message, organization = extract_organization_from_message(body)

        # Then write it to Postgres for retention
        threading.Thread(target=handle_postgres_write, args=(message, organization)).start()

        print('Finished storing logs!', organization)

    # Start consuming messages
    logs_rabbitmq_consumer.consume(callback=callback)


if __name__ == "__main__":
    # if ENVIRONMENT == 'development':
    #     print("Running in development mode")
    # else:
    #     print("Running in production mode")

    main()
